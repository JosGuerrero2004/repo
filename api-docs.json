{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenAPI definition",
    "version": "v0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "Public Company Subscriptions",
      "description": "Public endpoints for company subscription information"
    },
    {
      "name": "Authentication",
      "description": "Authentication API endpoints"
    },
    {
      "name": "Payments",
      "description": "Endpoints for managing payment operations"
    },
    {
      "name": "Payment Webhooks",
      "description": "Endpoints for receiving payment processor callbacks"
    },
    {
      "name": "Role Management",
      "description": "Endpoints for managing user roles"
    },
    {
      "name": "Company",
      "description": "Company management API"
    },
    {
      "name": "Subscriptions",
      "description": "Endpoints for managing company subscriptions"
    },
    {
      "name": "User Management",
      "description": "Endpoints for user management and profile operations"
    }
  ],
  "paths": {
    "/api/users/{userId}": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "Get user by ID",
        "description": "Retrieves a user by their ID",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {

              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {

              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {

              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {

              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Management"
        ],
        "summary": "Update user by ID",
        "description": "Updates a user by their ID (admin only)",
        "operationId": "updateUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {

              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {

              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {

              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {

              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User Management"
        ],
        "summary": "Delete user",
        "description": "Deletes a user by their ID (admin only)",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {

              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {

              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {

              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {

              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/toggle-status": {
      "put": {
        "tags": [
          "User Management"
        ],
        "summary": "Toggle user status",
        "description": "Toggles the active status of a user (enable/disable)",
        "operationId": "toggleUserStatus",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to toggle status for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User status toggled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {

              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {

              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {

              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {

              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/roles": {
      "put": {
        "tags": [
          "User Management"
        ],
        "summary": "Update user roles",
        "description": "Updates the roles of a user (admin only)",
        "operationId": "updateUserRoles",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User roles updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {

              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {

              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {

              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {

              }
            }
          }
        }
      }
    },
    "/api/users/profile": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "Get authenticated user profile",
        "description": "Returns the profile of the authenticated user",
        "operationId": "getProfile",
        "responses": {
          "200": {
            "description": "Successfully retrieved profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {

              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {

              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {

              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {

              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Management"
        ],
        "summary": "Update user profile",
        "description": "Updates the profile information of the authenticated user",
        "operationId": "updateProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {

              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {

              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {

              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {

              }
            }
          }
        }
      }
    },
    "/api/roles/{id}": {
      "get": {
        "tags": [
          "Role Management"
        ],
        "summary": "Get role by ID",
        "description": "Retrieves a single role by its ID",
        "operationId": "getRoleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the role to be retrieved",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "404": {
            "description": "Role not found"
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {

              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {

              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {

              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {

              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Role Management"
        ],
        "summary": "Update an existing role",
        "description": "Updates an existing role by ID",
        "operationId": "updateRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the role to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Role updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {

              }
            }
          },
          "404": {
            "description": "Role not found"
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {

              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {

              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {

              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Role Management"
        ],
        "summary": "Delete a role",
        "description": "Deletes a role by ID",
        "operationId": "deleteRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the role to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Role deleted successfully"
          },
          "404": {
            "description": "Role not found"
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {

              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {

              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {

              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {

              }
            }
          }
        }
      }
    },
    "/api/memberships/plans/price": {
      "put": {
        "tags": [
          "membership-controller"
        ],
        "operationId": "updateMembershipPrice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMembershipPriceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/companies/{id}": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get company by ID",
        "description": "Retrieves a specific company by its ID",
        "operationId": "getCompanyById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Company ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Company"
        ],
        "summary": "Update company",
        "description": "Updates an existing company owned by the authenticated user",
        "operationId": "updateCompany",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Company ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyPayloadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Company updated successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not company owner",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "Get all users",
        "description": "Retrieves a paginated list of users with optional search filtering",
        "operationId": "getAllUsers",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search term for filtering users by email or name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageable",
            "in": "query",
            "description": "Pagination and sorting parameters",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {

              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {

              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {

              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {

              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Create a new user",
        "description": "Creates a new user (admin only)",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {

              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {

              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {

              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {

              }
            }
          }
        }
      }
    },
    "/api/users/change-password": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Change password",
        "description": "Changes the password of the authenticated user",
        "operationId": "changePassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password changed successfully"
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {

              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {

              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {

              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {

              }
            }
          }
        }
      }
    },
    "/api/subscriptions": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Create a new subscription",
        "description": "Creates a new subscription for a company and returns payment details",
        "operationId": "createSubscription",
        "parameters": [
          {
            "name": "Company-Id",
            "in": "header",
            "description": "ID of the company creating the subscription",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "description": "Subscription creation request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Subscription created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequest"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          },
          "409": {
            "description": "Company already has an active subscription"
          }
        }
      }
    },
    "/api/subscriptions/{subscriptionId}/upgrade": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Upgrade subscription",
        "description": "Upgrades an existing subscription to a higher plan",
        "operationId": "upgradeSubscription",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "ID of the subscription to upgrade",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123
            }
          }
        ],
        "requestBody": {
          "description": "Upgrade details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpgradeSubscriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Upgrade initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequest"
                }
              }
            }
          },
          "400": {
            "description": "Invalid upgrade request"
          },
          "404": {
            "description": "Subscription not found"
          }
        }
      }
    },
    "/api/subscriptions/{subscriptionId}/cancel": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Cancel a subscription",
        "description": "Initiates cancellation of an existing subscription",
        "operationId": "cancelSubscription",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "ID of the subscription to cancel",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123
            }
          }
        ],
        "requestBody": {
          "description": "Cancellation details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelSubscriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Subscription cancellation initiated successfully"
          },
          "404": {
            "description": "Subscription not found"
          },
          "400": {
            "description": "Invalid request parameters"
          }
        }
      }
    },
    "/api/roles": {
      "get": {
        "tags": [
          "Role Management"
        ],
        "summary": "Get all roles",
        "description": "Retrieves a paginated list of all roles",
        "operationId": "getAllRoles",
        "parameters": [
          {
            "name": "pageable",
            "in": "query",
            "description": "Pagination and sorting parameters",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {

              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {

              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {

              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {

              }
            }
          },
          "200": {
            "description": "Successfully retrieved roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Role Management"
        ],
        "summary": "Create a new role",
        "description": "Creates a new user role",
        "operationId": "createRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Role created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {

              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {

              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {

              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {

              }
            }
          }
        }
      }
    },
    "/api/payments": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Create payment request",
        "description": "Initiates a new payment request and returns payment processing URL",
        "operationId": "createPayment",
        "requestBody": {
          "description": "Payment creation request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Payment request created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequest"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/payments/webhooks/paguelofacil": {
      "post": {
        "tags": [
          "Payment Webhooks"
        ],
        "summary": "Process PagueloFacil webhook",
        "description": "Receives and processes payment notifications from PagueloFacil payment processor",
        "operationId": "handlePaguelofacilWebhook",
        "parameters": [
          {
            "name": "X-Paguelofacil-Signature",
            "in": "header",
            "description": "HMAC signature for request validation",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Raw webhook payload from PagueloFacil",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": {
                  "transaction_id": "TXN123456789",
                  "status": "APPROVED",
                  "amount": 100,
                  "currency": "USD",
                  "reference": "INV-001"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Webhook processed successfully"
          },
          "400": {
            "description": "Invalid webhook payload"
          },
          "401": {
            "description": "Invalid or missing signature"
          },
          "403": {
            "description": "Request from unauthorized IP address"
          },
          "500": {
            "description": "Internal server error while processing webhook"
          }
        }
      }
    },
    "/api/companies": {
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Create a new company",
        "description": "Creates a new company for the authenticated user",
        "operationId": "createCompany",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyPayloadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Company created successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/companies/public/{id}/views": {
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Increment company views (public)",
        "description": "Increments the public views counter for a company",
        "operationId": "incrementCompanyViews",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Company ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Views incremented successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyViewsResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyViewsResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyViewsResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User registration",
        "description": "Registers a new user account",
        "operationId": "register",
        "requestBody": {
          "description": "User registration details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {

              }
            }
          },
          "409": {
            "description": "Conflict - User already exists",
            "content": {
              "application/json": {

              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server",
            "content": {
              "application/json": {

              }
            }
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh access token",
        "description": "Generates a new access token using a refresh token",
        "operationId": "refreshToken",
        "requestBody": {
          "description": "Refresh token request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "New access token generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {

              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired refresh token",
            "content": {
              "application/json": {

              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server",
            "content": {
              "application/json": {

              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User logout",
        "description": "Invalidates the user's refresh token",
        "operationId": "logout",
        "requestBody": {
          "description": "Logout request containing refresh token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully logged out",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {

              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server",
            "content": {
              "application/json": {

              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User login",
        "description": "Authenticates a user and returns JWT tokens",
        "operationId": "login",
        "requestBody": {
          "description": "Login credentials",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials",
            "content": {
              "application/json": {

              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {

              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server",
            "content": {
              "application/json": {

              }
            }
          }
        }
      }
    },
    "/api/companies/{id}/logo": {
      "patch": {
        "tags": [
          "Company"
        ],
        "summary": "Update company logo",
        "description": "Updates the logo of a company owned by the authenticated user",
        "operationId": "updateCompanyLogo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Company ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "logo": {
                    "type": "string",
                    "format": "binary",
                    "description": "Logo file"
                  }
                },
                "required": [
                  "logo"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logo updated successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file or membership required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not company owner",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/companies/{id}/gallery-images": {
      "patch": {
        "tags": [
          "Company"
        ],
        "summary": "Update company gallery images",
        "description": "Updates the gallery images of a company owned by the authenticated user",
        "operationId": "updateCompanyGalleryImages",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Company ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "galleryImages",
            "in": "query",
            "description": "Gallery image files",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gallery images updated successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid files or membership required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not company owner",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/companies/{id}/deactivate": {
      "patch": {
        "tags": [
          "Company"
        ],
        "summary": "Deactivate company",
        "description": "Deactivates a company owned by the authenticated user",
        "operationId": "deactivateCompany",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Company ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company deactivated successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not company owner",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/companies/{id}/cover-image": {
      "patch": {
        "tags": [
          "Company"
        ],
        "summary": "Update company cover image",
        "description": "Updates the cover image of a company owned by the authenticated user",
        "operationId": "updateCompanyCoverImage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Company ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "coverImage": {
                    "type": "string",
                    "format": "binary",
                    "description": "Cover image file"
                  }
                },
                "required": [
                  "coverImage"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cover image updated successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file or membership required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not company owner",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/companies/{id}/activate": {
      "patch": {
        "tags": [
          "Company"
        ],
        "summary": "Activate company",
        "description": "Activates a company owned by the authenticated user",
        "operationId": "activateCompany",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Company ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company activated successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not company owner",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/subscriptions/current": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Get current subscription",
        "description": "Retrieves the currently active subscription for the company",
        "operationId": "getCurrentSubscription",
        "parameters": [
          {
            "name": "Company-Id",
            "in": "header",
            "description": "ID of the company to get subscription for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanySubscriptionDto"
                }
              }
            }
          },
          "404": {
            "description": "No active subscription found for the company"
          }
        }
      }
    },
    "/api/payments/return/{paymentId}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Handle payment return",
        "description": "Processes the return callback from the payment processor after a payment attempt",
        "operationId": "handlePaymentReturn",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "ID of the payment to process",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "params",
            "in": "query",
            "description": "Additional parameters from payment processor",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment return processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentReturnResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error processing payment return",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentReturnResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/payments/history": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Get payment history",
        "description": "Retrieves paginated payment history for a specific company",
        "operationId": "getPaymentHistory",
        "parameters": [
          {
            "name": "Company-Id",
            "in": "header",
            "description": "ID of the company",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number (0-based)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            },
            "example": 20
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved payment history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid company ID or pagination parameters"
          },
          "401": {
            "description": "Unauthorized access"
          }
        }
      }
    },
    "/api/payments/cancel/{paymentId}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Handle payment cancellation",
        "description": "Processes the cancellation callback when a user cancels a payment",
        "operationId": "handlePaymentCancel",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "ID of the payment to cancel",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "params",
            "in": "query",
            "description": "Additional parameters from payment processor",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment cancellation processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentReturnResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error processing payment cancellation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentReturnResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/memberships/plans": {
      "get": {
        "tags": [
          "membership-controller"
        ],
        "operationId": "getAvailablePlans",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MembershipDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/companies/search": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Search companies by name",
        "description": "Searches companies by name with pagination",
        "operationId": "searchCompaniesByName",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Search query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "in": "query",
            "description": "Page size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Search completed successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanySearchResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid search parameters",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanySearchResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/companies/search/location": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Search companies by location",
        "description": "Searches companies by province and district with pagination",
        "operationId": "searchCompaniesByLocation",
        "parameters": [
          {
            "name": "province",
            "in": "query",
            "description": "Province",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "district",
            "in": "query",
            "description": "District",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "in": "query",
            "description": "Page size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Search completed successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanySearchResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid search parameters",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanySearchResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/companies/search/active": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get active companies (legacy, use /public instead)",
        "description": "Retrieves all active companies",
        "operationId": "getActiveCompanies",
        "responses": {
          "200": {
            "description": "Active companies retrieved successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyListResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/companies/public": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get active companies (public)",
        "description": "Retrieves all active companies with non-sensitive information",
        "operationId": "getAllPublicCompanies",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (0-based)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "example": 10
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "province",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "district",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Active companies retrieved successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PublicCompanyListResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/companies/public/{companyId}/subscription": {
      "get": {
        "tags": [
          "Public Company Subscriptions"
        ],
        "summary": "Get company subscription (public)",
        "description": "Retrieves the membership plan type for a company without exposing sensitive data",
        "operationId": "getCompanySubscription",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "ID of the company to get subscription for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicCompanySubscriptionDto"
                }
              }
            }
          },
          "404": {
            "description": "No active subscription found for the company"
          }
        }
      }
    },
    "/api/companies/public/ids": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get public companies by ids",
        "description": "Retrieves public companies given a comma-separated list of ids",
        "operationId": "getPublicCompaniesByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Comma-separated company ids, e.g. ids=1,2,3",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PublicCompanyListResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/companies/my-companies": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get user companies",
        "description": "Retrieves all companies owned by the authenticated user",
        "operationId": "getUserCompanies",
        "responses": {
          "200": {
            "description": "Companies retrieved successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyListResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyListResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "UserRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "maxLength": 2147483647,
            "minLength": 6
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "email": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "uniqueItems": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time"
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "UpdateProfileRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "email"
        ]
      },
      "RoleRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0
          }
        },
        "required": [
          "name"
        ]
      },
      "RoleResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "UpdateMembershipPriceRequest": {
        "type": "object",
        "properties": {
          "planId": {
            "type": "integer",
            "format": "int64"
          },
          "newPrice": {
            "type": "number",
            "minimum": 0
          }
        },
        "required": [
          "newPrice",
          "planId"
        ]
      },
      "MembershipDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "plan": {
            "type": "string",
            "enum": [
              "GRATIS",
              "ECONOMICO_ANUAL",
              "PREMIUM_ANUAL",
              "GOLD_ANUAL",
              "ECONOMICO_MENSUAL",
              "PREMIUM_MENSUAL",
              "GOLD_MENSUAL"
            ]
          },
          "price": {
            "type": "number"
          },
          "billingCycle": {
            "type": "string",
            "enum": [
              "MONTHLY",
              "YEARLY"
            ]
          },
          "active": {
            "type": "boolean"
          },
          "maxBranches": {
            "type": "integer",
            "format": "int32"
          },
          "maxUsers": {
            "type": "integer",
            "format": "int32"
          },
          "canHaveLogo": {
            "type": "boolean"
          },
          "canHaveCoverImage": {
            "type": "boolean"
          },
          "hasBasicProfile": {
            "type": "boolean"
          },
          "appearsInDirectory": {
            "type": "boolean"
          },
          "hasBasicContactForm": {
            "type": "boolean"
          },
          "hasEmailSupport": {
            "type": "boolean"
          },
          "hasAccessToQuotationBoard": {
            "type": "boolean"
          },
          "hasImprovedPositioning": {
            "type": "boolean"
          },
          "hasHighlightedPositioning": {
            "type": "boolean"
          },
          "hasCompanyVerification": {
            "type": "boolean"
          },
          "hasImageGallery": {
            "type": "boolean"
          },
          "hasPrioritySupport": {
            "type": "boolean"
          }
        }
      },
      "Address": {

      },
      "Branding": {
        "type": "object",
        "properties": {
          "logo": {
            "type": "string"
          },
          "coverImage": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "galleryImages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CompanyPayloadRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "foundedDate": {
            "type": "string",
            "format": "date"
          },
          "type": {
            "type": "string"
          },
          "storageType": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "status": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "businessName": {
            "type": "string"
          },
          "rut": {
            "type": "string"
          },
          "DV": {
            "type": "string"
          },
          "primaryActivity": {
            "type": "string"
          },
          "branchCount": {
            "type": "integer",
            "format": "int32"
          },
          "province": {
            "type": "string"
          },
          "district": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "website": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "coverImage": {
            "type": "string"
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          },
          "legalInfo": {
            "$ref": "#/components/schemas/LegalInfo"
          },
          "branding": {
            "$ref": "#/components/schemas/Branding"
          },
          "views": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Contact": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "website": {
            "type": "string"
          }
        }
      },
      "LegalInfo": {
        "type": "object",
        "properties": {
          "businessName": {
            "type": "string"
          },
          "rut": {
            "type": "string"
          },
          "DV": {
            "type": "string"
          },
          "primaryActivity": {
            "type": "string"
          }
        }
      },
      "CompanyAddressDto": {
        "type": "object",
        "description": "Company address information",
        "properties": {
          "province": {
            "type": "string",
            "description": "Province",
            "example": "San Salvador"
          },
          "district": {
            "type": "string",
            "description": "District",
            "example": "Centro"
          },
          "address": {
            "type": "string",
            "description": "Address",
            "example": 123
          }
        }
      },
      "CompanyBrandingDto": {
        "type": "object",
        "description": "Company branding information",
        "properties": {
          "logo": {
            "type": "string",
            "description": "Logo URL",
            "example": "https://example.com/logo.png"
          },
          "coverImage": {
            "type": "string",
            "description": "Cover image URL",
            "example": "https://example.com/cover.png"
          },
          "description": {
            "type": "string",
            "description": "Description",
            "example": "Leading tech company..."
          },
          "galleryImages": {
            "type": "array",
            "description": "Gallery images URLs",
            "example": [
              "https://example.com/img1.png",
              "https://example.com/img2.png"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CompanyContactDto": {
        "type": "object",
        "description": "Company contact information",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email",
            "example": "contact@company.com"
          },
          "phone": {
            "type": "string",
            "description": "Phone",
            "example": "+1234567890"
          },
          "website": {
            "type": "string",
            "description": "Website",
            "example": "https://company.com"
          }
        }
      },
      "CompanyLegalInfoDto": {
        "type": "object",
        "description": "Company legal information",
        "properties": {
          "businessName": {
            "type": "string",
            "description": "Business name",
            "example": "Tech Solutions Inc."
          },
          "rut": {
            "type": "string",
            "description": "RUT",
            "example": 12345678901
          },
          "DV": {
            "type": "string",
            "description": "DV",
            "example": 2
          },
          "primaryActivity": {
            "type": "string",
            "description": "Primary activity",
            "example": "Software Development"
          }
        }
      },
      "CompanyResponseDto": {
        "type": "object",
        "description": "Company response",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Company ID",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Company name",
            "example": "Tech Solutions Inc."
          },
          "foundedDate": {
            "type": "string",
            "format": "date",
            "description": "Founded date",
            "example": "2020-01-15"
          },
          "type": {
            "type": "string",
            "description": "Company type",
            "enum": [
              "NATURAL",
              "JURIDICA"
            ]
          },
          "storageType": {
            "type": "string",
            "description": "Storage type",
            "example": "cloud"
          },
          "active": {
            "type": "boolean",
            "description": "Active status",
            "example": true
          },
          "status": {
            "type": "string",
            "description": "Company status",
            "enum": [
              "VERIFIED",
              "REJECTED",
              "PENDING_VERIFICATION",
              "SUSPENDED"
            ]
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number",
            "example": "+1234567890"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "User ID",
            "example": 1
          },
          "contact": {
            "$ref": "#/components/schemas/CompanyContactDto",
            "description": "Contact information"
          },
          "address": {
            "$ref": "#/components/schemas/CompanyAddressDto",
            "description": "Address information"
          },
          "legalInfo": {
            "$ref": "#/components/schemas/CompanyLegalInfoDto",
            "description": "Legal information"
          },
          "branchCount": {
            "type": "integer",
            "format": "int32",
            "description": "Branch count",
            "example": 5
          },
          "branding": {
            "$ref": "#/components/schemas/CompanyBrandingDto",
            "description": "Branding information"
          },
          "views": {
            "type": "integer",
            "format": "int64",
            "description": "Public views count",
            "example": 0
          }
        }
      },
      "ChangePasswordRequest": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "minLength": 1
          },
          "newPassword": {
            "type": "string",
            "maxLength": 2147483647,
            "minLength": 6
          },
          "confirmPassword": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "confirmPassword",
          "currentPassword",
          "newPassword"
        ]
      },
      "CreateSubscriptionRequest": {
        "type": "object",
        "properties": {
          "plan": {
            "type": "string",
            "enum": [
              "GRATIS",
              "ECONOMICO_ANUAL",
              "PREMIUM_ANUAL",
              "GOLD_ANUAL",
              "ECONOMICO_MENSUAL",
              "PREMIUM_MENSUAL",
              "GOLD_MENSUAL"
            ]
          },
          "billingCycle": {
            "type": "string",
            "enum": [
              "MONTHLY",
              "YEARLY"
            ]
          },
          "autoRenew": {
            "type": "boolean"
          },
          "returnUrl": {
            "type": "string",
            "maxLength": 500,
            "minLength": 0
          },
          "cancelUrl": {
            "type": "string",
            "maxLength": 500,
            "minLength": 0
          }
        },
        "required": [
          "autoRenew",
          "billingCycle",
          "cancelUrl",
          "plan",
          "returnUrl"
        ]
      },
      "PaymentRequest": {
        "type": "object",
        "properties": {
          "paymentUrl": {
            "type": "string"
          },
          "externalPaymentId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "UpgradeSubscriptionRequest": {
        "type": "object",
        "properties": {
          "newPlan": {
            "type": "string",
            "enum": [
              "GRATIS",
              "ECONOMICO_ANUAL",
              "PREMIUM_ANUAL",
              "GOLD_ANUAL",
              "ECONOMICO_MENSUAL",
              "PREMIUM_MENSUAL",
              "GOLD_MENSUAL"
            ]
          }
        },
        "required": [
          "newPlan"
        ]
      },
      "CancelSubscriptionRequest": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "reason"
        ]
      },
      "CreatePaymentRequest": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "integer",
            "format": "int64"
          },
          "returnUrl": {
            "type": "string",
            "maxLength": 500,
            "minLength": 0
          },
          "cancelUrl": {
            "type": "string",
            "maxLength": 500,
            "minLength": 0
          }
        },
        "required": [
          "cancelUrl",
          "returnUrl",
          "subscriptionId"
        ]
      },
      "CompanyViewsResponseDto": {
        "type": "object",
        "properties": {
          "views": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RegisterRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "maxLength": 100,
            "minLength": 6
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "RefreshTokenRequest": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string"
          }
        }
      },
      "RefreshTokenResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "LogoutRequest": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        }
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Page": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {

            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "paged": {
            "type": "boolean"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "unpaged": {
            "type": "boolean"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "sorted": {
            "type": "boolean"
          },
          "unsorted": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "CompanySubscriptionDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "companyId": {
            "type": "integer",
            "format": "int64"
          },
          "membership": {
            "$ref": "#/components/schemas/MembershipDto"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "EXPIRED",
              "CANCELLED",
              "SUSPENDED",
              "PENDING_PAYMENT"
            ]
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "autoRenew": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "isExpiringSoon": {
            "type": "boolean"
          }
        },
        "required": [
          "companyId",
          "id",
          "membership",
          "status"
        ]
      },
      "PaymentReturnResponse": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "PROCESSING",
              "COMPLETED",
              "FAILED",
              "CANCELLED",
              "EXPIRED",
              "REFUNDED"
            ]
          },
          "amount": {
            "type": "number"
          },
          "message": {
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          }
        }
      },
      "PaymentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "externalPaymentId": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "PROCESSING",
              "COMPLETED",
              "FAILED",
              "CANCELLED",
              "EXPIRED",
              "REFUNDED"
            ]
          },
          "method": {
            "type": "string",
            "enum": [
              "PAGUELOFACIL"
            ]
          },
          "paymentDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CompanySearchResponseDto": {
        "type": "object",
        "description": "Company search response",
        "properties": {
          "results": {
            "type": "array",
            "description": "Search results",
            "items": {
              "$ref": "#/components/schemas/CompanyResponseDto"
            }
          },
          "query": {
            "type": "string",
            "description": "Search query",
            "example": "tech"
          },
          "resultsCount": {
            "type": "integer",
            "format": "int32",
            "description": "Results count",
            "example": 5
          }
        }
      },
      "CompanyListResponseDto": {
        "type": "object",
        "description": "Company list response",
        "properties": {
          "companies": {
            "type": "array",
            "description": "List of companies",
            "items": {
              "$ref": "#/components/schemas/CompanyResponseDto"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "description": "Total count",
            "example": 10
          },
          "currentPage": {
            "type": "integer",
            "format": "int32",
            "description": "Current page",
            "example": 0
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "description": "Page size",
            "example": 10
          }
        }
      },
      "PublicCompanyAddressDto": {
        "type": "object",
        "description": "Public company address information",
        "properties": {
          "province": {
            "type": "string",
            "description": "Province",
            "example": "Panamá"
          },
          "district": {
            "type": "string",
            "description": "District",
            "example": "Panamá"
          }
        }
      },
      "PublicCompanyContactDto": {
        "type": "object",
        "description": "Public company contact information",
        "properties": {
          "website": {
            "type": "string",
            "description": "Website",
            "example": "https://company.com"
          },
          "phone": {
            "type": "string",
            "description": "Phone",
            "example": "+1234567890"
          }
        }
      },
      "PublicCompanyListResponseDto": {
        "type": "object",
        "description": "Public company list response",
        "properties": {
          "companies": {
            "type": "array",
            "description": "List of companies",
            "items": {
              "$ref": "#/components/schemas/PublicCompanyResponseDto"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "description": "Total count",
            "example": 10
          },
          "currentPage": {
            "type": "integer",
            "format": "int32",
            "description": "Current page",
            "example": 0
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "description": "Page size",
            "example": 10
          }
        }
      },
      "PublicCompanyResponseDto": {
        "type": "object",
        "description": "Public company response with non-sensitive information",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Company ID",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Company name",
            "example": "Tech Solutions Inc."
          },
          "type": {
            "type": "string",
            "description": "Company type",
            "enum": [
              "NATURAL",
              "JURIDICA"
            ]
          },
          "storageType": {
            "type": "string",
            "description": "Storage type",
            "example": "cloud"
          },
          "description": {
            "type": "string",
            "description": "Description",
            "example": "Leading tech company..."
          },
          "branding": {
            "$ref": "#/components/schemas/CompanyBrandingDto",
            "description": "Branding information"
          },
          "contact": {
            "$ref": "#/components/schemas/PublicCompanyContactDto",
            "description": "Contact information"
          },
          "address": {
            "$ref": "#/components/schemas/PublicCompanyAddressDto",
            "description": "Address information"
          },
          "active": {
            "type": "boolean",
            "description": "is active",
            "example": true
          },
          "views": {
            "type": "integer",
            "format": "int64",
            "description": "Public views count",
            "example": 0
          },
          "valid": {
            "type": "string",
            "description": "Validation status",
            "enum": [
              "VERIFIED",
              "REJECTED",
              "PENDING_VERIFICATION",
              "SUSPENDED"
            ],
            "example": "VERIFIED"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "example": "2023-01-01"
          }
        }
      },
      "PublicCompanySubscriptionDto": {
        "type": "object",
        "properties": {
          "plan": {
            "type": "string",
            "enum": [
              "GRATIS",
              "ECONOMICO_ANUAL",
              "PREMIUM_ANUAL",
              "GOLD_ANUAL",
              "ECONOMICO_MENSUAL",
              "PREMIUM_MENSUAL",
              "GOLD_MENSUAL"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "EXPIRED",
              "CANCELLED",
              "SUSPENDED",
              "PENDING_PAYMENT"
            ]
          },
          "isActive": {
            "type": "boolean"
          }
        }
      }
    }
  }
}
